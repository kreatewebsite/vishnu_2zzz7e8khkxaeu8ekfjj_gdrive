name: PPTX to Images for GCP Bucket

on:
  push:
    paths:
      - 'input/content/**'


jobs:
  convert_to_images:
    # if: "!contains(github.event.head_commit.message, 'convert')"
    runs-on: ubuntu-latest
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          sudo apt-get update 
          sudo apt-get install -y poppler-utils libreoffice
      - name: Find PPTX Files
        id: find_pptx_files
        run: |
          find input/content -name "*.pptx" -type f > pptx_files.txt
          cat pptx_files.txt
          ls -a
          
      - name: Get Repository Name
        id: get_repo_name
        run: |
          # Extract the repository name from $GITHUB_REPOSITORY
          REPO_NAME=$(basename $GITHUB_REPOSITORY)
          echo "Repository name without owner: $REPO_NAME"
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_OUTPUT
           
      - name: Convert PPTX to PDF and Images
        run: |
          repo_name="${{ steps.get_repo_name.outputs.REPO_NAME }}"
          mkdir "$repo_name"
          
          
          for ppt_file in $(cat pptx_files.txt); do
            ppt_name=$(basename "$ppt_file" .pptx)
            echo "This the ppt file name = $ppt_name, and path is this = $ppt_file"
            
            mkdir -p "$ppt_name/images"
            
            libreoffice --headless --convert-to pdf "$ppt_file"
            pdf_file="$ppt_name.pdf"
            
            pdftoppm -png "$pdf_file" "$ppt_name/images/slide"  # Convert PDF to PNG images, you can use -jpeg for JPEG images
            
            for img in "$ppt_name/images/"*.png; do
                echo "Processing image: $img"
                img_name=$(basename "$img")
                echo "Extracted img_name: $img_name"
                echo "$img_name" >> "$ppt_name/$ppt_name.imagelist"
            done
            pdftotext "$pdf_file" "$ppt_name/$ppt_name.txt"  # Convert PDF to text file

            # Creating a .path file, which contains path to gcp bucket imagesfolder
            echo "https://storage.googleapis.com/${repo_name,,}//$ppt_name/images/" >> "$ppt_name/$ppt_name.path"
            
            rm "$pdf_file"
            mv "$ppt_name" "$repo_name"
            
          done < pptx_files.txt

          cp -r input/content "$repo_name/input"
          
          ls -a # list the files and folder that were created
        continue-on-error: true

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: converted-images-text
          path: "${{steps.get_repo_name.outputs.REPO_NAME}}"

  gcp_setup: 
    runs-on: ubuntu-latest
    needs: convert_to_images

    steps: 

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: traveltune
      
      - name: Get Repository Name
        id: get_repo_name
        run: |
          # Extract the repository name from $GITHUB_REPOSITORY
          REPO_NAME=$(basename $GITHUB_REPOSITORY)
          echo "Repository name without owner: $REPO_NAME"
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_OUTPUT
      
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: converted-images-text
          path: "${{steps.get_repo_name.outputs.REPO_NAME}}"

      
      - name: Upload files to Google Cloud Storage Bucket
        id: check_bucket
        run: |
          repo_name="${{ steps.get_repo_name.outputs.REPO_NAME }}"
          BUCKET_NAME="${repo_name,,}"
          
          if gsutil ls -b gs://"$BUCKET_NAME"/; then
            echo "Bucket exists"
            gsutil -m cp -r "$repo_name/*" "gs://$BUCKET_NAME"
            echo "::set-output name=exists::true"
          else
            echo "Bucket does not exist"
            gsutil mb gs://"$BUCKET_NAME"/
            gsutil -m cp -r "$repo_name/*" "gs://$BUCKET_NAME"
          fi
